install.packages("tidyverse")
install.packages("jsonlite")
setwd("C:/Users/salma/GitHub/R_Analysis-Mod 15")
setwd("C:/Users/salma/GitHub/R_Analysis-Mod 15")
setwd("C:/Users/salma/GitHub/R_Analysis-Mod 15")
x<-3
x <- 5
x <- 5+3
numlist <- c(0,1,2,3,4,5,6,7,8,9)
?<install.packages>
? read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
demo_table[3,'year']
demo_table[3,'Year']
demo_table[3,4]
demo_table$"Year"[4]
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
num_rows <- 1:nrow(demo_table)
demo_table[sample(1:nrow(demo_table), 3),]
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
install.packages("dplyr")
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
library(tidyverse)
?mutate()
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
all.equal(demo_table3,wide_table)
?ggplot()
?ggplot()
?gather()
View(wide_table)
?ggplot()
?ggplot()
?subset
?ggplot()
head(mpg)
head(mpg)
demo_table[3,3]
plt + geom_bar() #plot a bar plot
head(mpg)
head(mpg)
?geom_bar()
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
head(mpg)
head(mpg)
?ggplot()
View(demo_table2)
View(long_table)
?ggplot()
install.packages("tidyverse")
install.packages("jsonlite")
?ggplot()
head(mpg)
?sample_n()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
?t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
?aov()
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
> mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
View(mtcars_filt)
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
library(dplyr)
library(ggplot2)
library(jsonlite)
library(tidyverse)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
library(ggplot2)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
library(jsonlite)
library(dplyr)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
library(dplyr)
Mecha_car <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(Mecha_car)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=Mecha_car) #generated multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=Mecha_car)) #generated summary statistics
plt <- ggplot(Mecha_car,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
library(ggplot2)
plt <- ggplot(Mecha_car,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
model <- lm(mpg ~ vehicle_length,Mecha_car) #create linear model
yvals <- model$coefficients['vehicle_length']*Mecha_car$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(Mecha_car,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
model <- lm(mpg ~ vehicle_length,Mecha_car) #create linear model
yvals <- model$coefficients['vehicle_length']*Mecha_car$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(Mecha_car,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
View(coil_table)
?read.csv()
View(demo_table2)
total_summary <- coil_table %>% group_by(PSI) %>% summarize(), .groups = 'keep') #create summary table
total_summary <- coil_table %>% group_by(PSI) %>% summarize() .groups = 'keep') #create summary table
total_summary <- coil_table %>% group_by(PSI) %>% summarize() .groups = 'keep' #create summary table
total_summary <- coil_table %>% group_by(PSI) %>% summarize()  #create summary table
View(total_summary)
total_summary <- coil_table %>% group_by(PSI) %>% summarize(.groups='keep')  #create summary table
View(total_summary)
?summarize()
total_summary <- coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI),SD=sd(PSI))  #create summary table
View(total_summary)
total_summary <- coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI),SD=sd(PSI),.groups="keep")  #create summary table
total_summary <- coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups="keep")  #create summary table
View(total_summary)
total_summary <- coil_table %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups="keep")  #create summary table
View(total_summary)
total_summary <- summarise (Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups="keep")
total_summary <- summarise (coil_table, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups="keep")
View(total_summary)
total_summary <- summarise (coil_table, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups="keep")
library(dplyr)
library(ggplot2)
total_summary <- summarise (coil_table, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups="keep")
coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
total_summary <- summarise (coil_table, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups="keep")
lot_summary <- coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #creating summary table using groupby
View(lot_summary)
lot_summary <- coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #creating summary table using groupby
View(lot_summary)
?t,test()
?t.test()
t.test(log10(coil_table$PSI),mu=mean(log10(population_table$PSI))) #compare sample versus population means
t.test(coil_table$PSI, mu=mean(1500) #compare sample versus population means
t.test(coil_table$PSI, mu=mean(1500)) #compare sample versus population means
t.test((coil_table$PSI), mu=mean(1500)) #compare sample versus population means
View(total_summary)
